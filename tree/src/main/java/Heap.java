/**
 二叉堆

 本质上是一种完全二叉树，分为最大堆和最小堆
 最大堆： 任何一个父节点的值都大于等于它左右孩子节点的值
 最小堆：任何一个父节点的值，都小于或者等于它左右孩子节点的值
 二叉堆的根节点叫堆顶，最大堆的堆顶是整个堆中的最大元素，最小堆的堆顶是整个堆中的最小元素


 常规操作：
 1.插入操作
 2.删除节点
 3.构建二叉堆

 以上操作都依赖于堆的调整：
 上浮和下沉

 插入节点的时候，插在完全二叉树的最后一个节点上，然后进行上浮调整
 如果是最大堆，那么如果这个新插入的节点比其父节点大，那么就和父节点交换位置，依次类推，最终最多可以上浮到根节点位置
 如果是最小堆，那么如果这个新插入的节点比其父节点小，那么就和父节点交换位置，依次类推，最终最多可以上浮到根节点位置


 删除节点的时候，删除根节点，然后将最后一个节点作为根节点，然后进行下沉调整
 如果是最小堆，那么将新的根节点和其左右子树进行比较，如果根节点 大于两个子孩子节点中的最小值节点，和其交换位置 ，依次类推，最终最多可以下沉到叶子节点位置
 如果是最大堆，需要保证堆顶值最大，那么 新的根节点小于两个孩子中的最大值节点，那么和其交换位置，依次类推，最多可以下沉到叶子节点位置


 构建二叉堆，依次对所有非叶子节点进行下沉  最终就可以把一个无序的完全二叉树调整为二叉堆


 注意！二叉堆是一个完全二叉树，存储方式是顺序存储，存储在数组中，完全二叉树存储在数组中，不会有空位置

 可以根据数组的下标来计算 假设父节点的下标是parent ，那么它的左孩子的下标就是2xparent+1  右孩子就是2xparent+2
  注意！链表存储的则不能这样算
 */
public class Heap {


    /**
     * 先序遍历
     * @param array
     */
    public static void pre(int[] array,int root){
        if (root>=array.length){
            return;
        }
        System.out.print(array[root]);
        pre(array,2*root+1);
        pre(array,2*root+2);
    }


    public static void main(String[] args) {
        int[] array=new int[]{2,5,3,4,1};
        pre(array,0);
        System.out.println("前序遍历");
        System.out.println("调整成二叉堆，最大堆");
    }


    /**
     * 构建堆
     * @param array
     */
    public static void buildHeadp(int[] array){

    }


}
